{"version":3,"sources":["parser.js","../src/FileSaver.js","tableToExcel.js"],"names":["TTEParser","methods","entities","ws","table","opts","_r","_c","cs","rs","r","c","rows","widths","getAttribute","split","map","item","parseInt","merges","length","row","getRow","height","parseFloat","tds","children","td","_m","m","s","e","exCell","getCell","getColumnAddress","push","value","getValue","autoStyle","styles","getStylesDataAttr","font","alignment","border","fill","numFmt","splice","forEach","width","_i","columns","applyMerges","mergeCells","getExcelColumnName","htmldecode","x","RegExp","str","o","trim","replace","i","num","ret","a","b","String","fromCharCode","col","dataType","rawVal","innerHTML","val","Number","date","Date","UTC","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","toLowerCase","Boolean","text","hyperlink","error","name","size","color","argb","bold","italic","underline","strike","horizontal","vertical","wrapText","textRotation","indent","readingOrder","top","left","bottom","right","style","type","pattern","fgColor","TableToExcel","Parser","wb","ExcelJS","Workbook","sheetName","addWorksheet","fileName","xlsx","writeBuffer","then","buffer","Blob","initSheet","sheet","parseDomToTable","initWorkBook","tableToSheet","defaultOpts","tableToBook","save","window"],"mappings":"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","file":"tableToExcel.js","sourceRoot":"../src","sourcesContent":["const TTEParser = (function() {\r\n  let methods = {};\r\n\r\n  /**\r\n   * Parse HTML table to excel worksheet\r\n   * @param {object} ws The worksheet object\r\n   * @param {HTML entity} table The table to be converted to excel sheet\r\n   */\r\n  methods.parseDomToTable = function(ws, table, opts) {\r\n    let _r, _c, cs, rs, r, c;\r\n    let rows = [...table.rows];\r\n    let widths = table.getAttribute(\"data-cols-width\");\r\n    if (widths)\r\n      widths = widths.split(\",\").map(function(item) {\r\n        return parseInt(item);\r\n      });\r\n    let merges = [];\r\n    for (_r = 0; _r < rows.length; ++_r) {\r\n      let row = rows[_r];\r\n      r = _r + 1; // Actual excel row number\r\n      c = 1; // Actual excel col number\r\n      if (row.getAttribute(\"data-exclude\") === \"true\") {\r\n        rows.splice(_r, 1);\r\n        _r--;\r\n        continue;\r\n      }\r\n      if (row.getAttribute(\"data-height\")) {\r\n        let exRow = ws.getRow(r);\r\n        exRow.height = parseFloat(row.getAttribute(\"data-height\"));\r\n      }\r\n\r\n      let tds = [...row.children];\r\n      for (_c = 0; _c < tds.length; ++_c) {\r\n        let td = tds[_c];\r\n        if (td.getAttribute(\"data-exclude\") === \"true\") {\r\n          tds.splice(_c, 1);\r\n          _c--;\r\n          continue;\r\n        }\r\n        for (let _m = 0; _m < merges.length; ++_m) {\r\n          var m = merges[_m];\r\n          if (m.s.c == c && m.s.r <= r && r <= m.e.r) {\r\n            c = m.e.c + 1;\r\n            _m = -1;\r\n          }\r\n        }\r\n        let exCell = ws.getCell(getColumnAddress(c, r));\r\n        // calculate merges\r\n        cs = parseInt(td.getAttribute(\"colspan\")) || 1;\r\n        rs = parseInt(td.getAttribute(\"rowspan\")) || 1;\r\n        if (cs > 1 || rs > 1) {\r\n          merges.push({\r\n            s: { c: c, r: r },\r\n            e: { c: c + cs - 1, r: r + rs - 1 }\r\n          });\r\n        }\r\n        c += cs;\r\n        exCell.value = getValue(td);\r\n        if (!opts.autoStyle) {\r\n          let styles = getStylesDataAttr(td);\r\n          exCell.font = styles.font || null;\r\n          exCell.alignment = styles.alignment || null;\r\n          exCell.border = styles.border || null;\r\n          exCell.fill = styles.fill || null;\r\n          exCell.numFmt = styles.numFmt || null;\r\n        }\r\n      }\r\n    }\r\n    //Setting column width\r\n    if (widths)\r\n      widths.forEach((width, _i) => {\r\n        ws.columns[_i].width = width;\r\n      });\r\n    applyMerges(ws, merges);\r\n    return ws;\r\n  };\r\n\r\n  /**\r\n   * To apply merges on the sheet\r\n   * @param {object} ws The worksheet object\r\n   * @param {object[]} merges array of merges\r\n   */\r\n  let applyMerges = function(ws, merges) {\r\n    merges.forEach(m => {\r\n      ws.mergeCells(\r\n        getExcelColumnName(m.s.c) +\r\n          m.s.r +\r\n          \":\" +\r\n          getExcelColumnName(m.e.c) +\r\n          m.e.r\r\n      );\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Convert HTML to plain text\r\n   */\r\n  let htmldecode = (function() {\r\n    let entities = [\r\n      [\"nbsp\", \" \"],\r\n      [\"middot\", \"·\"],\r\n      [\"quot\", '\"'],\r\n      [\"apos\", \"'\"],\r\n      [\"gt\", \">\"],\r\n      [\"lt\", \"<\"],\r\n      [\"amp\", \"&\"]\r\n    ].map(function(x) {\r\n      return [new RegExp(\"&\" + x[0] + \";\", \"g\"), x[1]];\r\n    });\r\n    return function htmldecode(str) {\r\n      let o = str\r\n        .trim()\r\n        .replace(/\\s+/g, \" \")\r\n        .replace(/<\\s*[bB][rR]\\s*\\/?>/g, \"\\n\")\r\n        .replace(/<[^>]*>/g, \"\");\r\n      for (let i = 0; i < entities.length; ++i)\r\n        o = o.replace(entities[i][0], entities[i][1]);\r\n      return o;\r\n    };\r\n  })();\r\n\r\n  /**\r\n   * Takes a positive integer and returns the corresponding column name.\r\n   * @param {number} num  The positive integer to convert to a column name.\r\n   * @return {string}  The column name.\r\n   */\r\n  let getExcelColumnName = function(num) {\r\n    for (var ret = \"\", a = 1, b = 26; (num -= a) >= 0; a = b, b *= 26) {\r\n      ret = String.fromCharCode(parseInt((num % b) / a) + 65) + ret;\r\n    }\r\n    return ret;\r\n  };\r\n\r\n  let getColumnAddress = function(col, row) {\r\n    return getExcelColumnName(col) + row;\r\n  };\r\n\r\n  /**\r\n   * Checks the data type specified and conerts the value to it.\r\n   * @param {HTML entity} td\r\n   */\r\n  let getValue = function(td) {\r\n    let dataType = td.getAttribute(\"data-t\");\r\n    let rawVal = htmldecode(td.innerHTML);\r\n    if (dataType) {\r\n      let val;\r\n      switch (dataType) {\r\n        case \"n\": //number\r\n          val = Number(rawVal);\r\n          break;\r\n        case \"d\": //date\r\n          let date = new Date(rawVal);\r\n          // To fix the timezone issue\r\n          val = new Date(\r\n            Date.UTC(\r\n              date.getFullYear(),\r\n              date.getMonth(),\r\n              date.getDate(),\r\n              date.getHours(),\r\n              date.getMinutes(),\r\n              date.getSeconds()\r\n            )\r\n          );\r\n          break;\r\n        case \"b\": //boolean\r\n          val =\r\n            rawVal.toLowerCase() === \"true\"\r\n              ? true\r\n              : rawVal.toLowerCase() === \"false\"\r\n              ? false\r\n              : Boolean(parseInt(rawVal));\r\n          break;\r\n        default:\r\n          val = rawVal;\r\n      }\r\n      return val;\r\n    } else if (td.getAttribute(\"data-hyperlink\")) {\r\n      return {\r\n        text: rawVal,\r\n        hyperlink: td.getAttribute(\"data-hyperlink\")\r\n      };\r\n    } else if (td.getAttribute(\"data-error\")) {\r\n      return { error: td.getAttribute(\"data-error\") };\r\n    }\r\n    return rawVal;\r\n  };\r\n\r\n  /**\r\n   * Prepares the style object for a cell using the data attributes\r\n   * @param {HTML entity} td\r\n   */\r\n  let getStylesDataAttr = function(td) {\r\n    //Font attrs\r\n    let font = {};\r\n    if (td.getAttribute(\"data-f-name\"))\r\n      font.name = td.getAttribute(\"data-f-name\");\r\n    if (td.getAttribute(\"data-f-sz\")) font.size = td.getAttribute(\"data-f-sz\");\r\n    if (td.getAttribute(\"data-f-color\"))\r\n      font.color = { argb: td.getAttribute(\"data-f-color\") };\r\n    if (td.getAttribute(\"data-f-bold\") === \"true\") font.bold = true;\r\n    if (td.getAttribute(\"data-f-italic\") === \"true\") font.italic = true;\r\n    if (td.getAttribute(\"data-f-underline\") === \"true\") font.underline = true;\r\n    if (td.getAttribute(\"data-f-strike\") === \"true\") font.strike = true;\r\n\r\n    // Alignment attrs\r\n    let alignment = {};\r\n    if (td.getAttribute(\"data-a-h\"))\r\n      alignment.horizontal = td.getAttribute(\"data-a-h\");\r\n    if (td.getAttribute(\"data-a-v\"))\r\n      alignment.vertical = td.getAttribute(\"data-a-v\");\r\n    if (td.getAttribute(\"data-a-wrap\") === \"true\") alignment.wrapText = true;\r\n    if (td.getAttribute(\"data-a-text-rotation\"))\r\n      alignment.textRotation = td.getAttribute(\"data-a-text-rotation\");\r\n    if (td.getAttribute(\"data-a-indent\"))\r\n      alignment.indent = td.getAttribute(\"data-a-indent\");\r\n    if (td.getAttribute(\"data-a-rtl\") === \"true\")\r\n      alignment.readingOrder = \"rtl\";\r\n\r\n    // Border attrs\r\n    let border = {\r\n      top: {},\r\n      left: {},\r\n      bottom: {},\r\n      right: {}\r\n    };\r\n\r\n    if (td.getAttribute(\"data-b-a-s\")) {\r\n      let style = td.getAttribute(\"data-b-a-s\");\r\n      border.top.style = style;\r\n      border.left.style = style;\r\n      border.bottom.style = style;\r\n      border.right.style = style;\r\n    }\r\n    if (td.getAttribute(\"data-b-a-c\")) {\r\n      let color = { argb: td.getAttribute(\"data-b-a-c\") };\r\n      border.top.color = color;\r\n      border.left.color = color;\r\n      border.bottom.color = color;\r\n      border.right.color = color;\r\n    }\r\n    if (td.getAttribute(\"data-b-t-s\")) {\r\n      border.top.style = td.getAttribute(\"data-b-t-s\");\r\n      if (td.getAttribute(\"data-b-t-c\"))\r\n        border.top.color = { argb: td.getAttribute(\"data-b-t-c\") };\r\n    }\r\n    if (td.getAttribute(\"data-b-l-s\")) {\r\n      border.left.style = td.getAttribute(\"data-b-l-s\");\r\n      if (td.getAttribute(\"data-b-l-c\"))\r\n        border.left.color = { argb: td.getAttribute(\"data-b-t-c\") };\r\n    }\r\n    if (td.getAttribute(\"data-b-b-s\")) {\r\n      border.bottom.style = td.getAttribute(\"data-b-b-s\");\r\n      if (td.getAttribute(\"data-b-b-c\"))\r\n        border.bottom.color = { argb: td.getAttribute(\"data-b-t-c\") };\r\n    }\r\n    if (td.getAttribute(\"data-b-r-s\")) {\r\n      border.right.style = td.getAttribute(\"data-b-r-s\");\r\n      if (td.getAttribute(\"data-b-r-c\"))\r\n        border.right.color = { argb: td.getAttribute(\"data-b-t-c\") };\r\n    }\r\n\r\n    //Fill\r\n    let fill;\r\n    if (td.getAttribute(\"data-fill-color\")) {\r\n      fill = {\r\n        type: \"pattern\",\r\n        pattern: \"solid\",\r\n        fgColor: { argb: td.getAttribute(\"data-fill-color\") }\r\n      };\r\n    }\r\n    //number format\r\n    let numFmt;\r\n    if (td.getAttribute(\"data-num-fmt\"))\r\n      numFmt = td.getAttribute(\"data-num-fmt\");\r\n\r\n    return {\r\n      font,\r\n      alignment,\r\n      border,\r\n      fill,\r\n      numFmt\r\n    };\r\n  };\r\n\r\n  return methods;\r\n})();\r\n\r\nexport default TTEParser;\r\n","/*\n* FileSaver.js\n* A saveAs() FileSaver implementation.\n*\n* By Eli Grey, http://eligrey.com\n*\n* License : https://github.com/eligrey/FileSaver.js/blob/master/LICENSE.md (MIT)\n* source  : http://purl.eligrey.com/github/FileSaver.js\n*/\n\n// The one and only way of getting global scope in all environments\n// https://stackoverflow.com/q/3277182/1008999\nvar _global = typeof window === 'object' && window.window === window\n  ? window : typeof self === 'object' && self.self === self\n  ? self : typeof global === 'object' && global.global === global\n  ? global\n  : this\n\nfunction bom (blob, opts) {\n  if (typeof opts === 'undefined') opts = { autoBom: false }\n  else if (typeof opts !== 'object') {\n    console.warn('Deprecated: Expected third argument to be a object')\n    opts = { autoBom: !opts }\n  }\n\n  // prepend BOM for UTF-8 XML and text/* types (including HTML)\n  // note: your browser will automatically convert UTF-16 U+FEFF to EF BB BF\n  if (opts.autoBom && /^\\s*(?:text\\/\\S*|application\\/xml|\\S*\\/\\S*\\+xml)\\s*;.*charset\\s*=\\s*utf-8/i.test(blob.type)) {\n    return new Blob([String.fromCharCode(0xFEFF), blob], { type: blob.type })\n  }\n  return blob\n}\n\nfunction download (url, name, opts) {\n  var xhr = new XMLHttpRequest()\n  xhr.open('GET', url)\n  xhr.responseType = 'blob'\n  xhr.onload = function () {\n    saveAs(xhr.response, name, opts)\n  }\n  xhr.onerror = function () {\n    console.error('could not download file')\n  }\n  xhr.send()\n}\n\nfunction corsEnabled (url) {\n  var xhr = new XMLHttpRequest()\n  // use sync to avoid popup blocker\n  xhr.open('HEAD', url, false)\n  try {\n    xhr.send()\n  } catch (e) {}\n  return xhr.status >= 200 && xhr.status <= 299\n}\n\n// `a.click()` doesn't work for all browsers (#465)\nfunction click (node) {\n  try {\n    node.dispatchEvent(new MouseEvent('click'))\n  } catch (e) {\n    var evt = document.createEvent('MouseEvents')\n    evt.initMouseEvent('click', true, true, window, 0, 0, 0, 80,\n                          20, false, false, false, false, 0, null)\n    node.dispatchEvent(evt)\n  }\n}\n\nvar saveAs = _global.saveAs || (\n  // probably in some web worker\n  (typeof window !== 'object' || window !== _global)\n    ? function saveAs () { /* noop */ }\n\n  // Use download attribute first if possible (#193 Lumia mobile)\n  : 'download' in HTMLAnchorElement.prototype\n  ? function saveAs (blob, name, opts) {\n    var URL = _global.URL || _global.webkitURL\n    var a = document.createElement('a')\n    name = name || blob.name || 'download'\n\n    a.download = name\n    a.rel = 'noopener' // tabnabbing\n\n    // TODO: detect chrome extensions & packaged apps\n    // a.target = '_blank'\n\n    if (typeof blob === 'string') {\n      // Support regular links\n      a.href = blob\n      if (a.origin !== location.origin) {\n        corsEnabled(a.href)\n          ? download(blob, name, opts)\n          : click(a, a.target = '_blank')\n      } else {\n        click(a)\n      }\n    } else {\n      // Support blobs\n      a.href = URL.createObjectURL(blob)\n      setTimeout(function () { URL.revokeObjectURL(a.href) }, 4E4) // 40s\n      setTimeout(function () { click(a) }, 0)\n    }\n  }\n\n  // Use msSaveOrOpenBlob as a second approach\n  : 'msSaveOrOpenBlob' in navigator\n  ? function saveAs (blob, name, opts) {\n    name = name || blob.name || 'download'\n\n    if (typeof blob === 'string') {\n      if (corsEnabled(blob)) {\n        download(blob, name, opts)\n      } else {\n        var a = document.createElement('a')\n        a.href = blob\n        a.target = '_blank'\n        setTimeout(function () { click(a) })\n      }\n    } else {\n      navigator.msSaveOrOpenBlob(bom(blob, opts), name)\n    }\n  }\n\n  // Fallback to using FileReader and a popup\n  : function saveAs (blob, name, opts, popup) {\n    // Open a popup immediately do go around popup blocker\n    // Mostly only available on user interaction and the fileReader is async so...\n    popup = popup || open('', '_blank')\n    if (popup) {\n      popup.document.title =\n      popup.document.body.innerText = 'downloading...'\n    }\n\n    if (typeof blob === 'string') return download(blob, name, opts)\n\n    var force = blob.type === 'application/octet-stream'\n    var isSafari = /constructor/i.test(_global.HTMLElement) || _global.safari\n    var isChromeIOS = /CriOS\\/[\\d]+/.test(navigator.userAgent)\n\n    if ((isChromeIOS || (force && isSafari)) && typeof FileReader === 'object') {\n      // Safari doesn't allow downloading of blob URLs\n      var reader = new FileReader()\n      reader.onloadend = function () {\n        var url = reader.result\n        url = isChromeIOS ? url : url.replace(/^data:[^;]*;/, 'data:attachment/file;')\n        if (popup) popup.location.href = url\n        else location = url\n        popup = null // reverse-tabnabbing #460\n      }\n      reader.readAsDataURL(blob)\n    } else {\n      var URL = _global.URL || _global.webkitURL\n      var url = URL.createObjectURL(blob)\n      if (popup) popup.location = url\n      else location.href = url\n      popup = null // reverse-tabnabbing #460\n      setTimeout(function () { URL.revokeObjectURL(url) }, 4E4) // 40s\n    }\n  }\n)\n\n_global.saveAs = saveAs.saveAs = saveAs\n\nif (typeof module !== 'undefined') {\n  module.exports = saveAs;\n}\n","import Parser from \"./parser\";\r\nimport saveAs from \"file-saver\";\r\n// import ExcelJS from \"../node_modules/exceljs/dist/es5/exceljs.browser\";\r\n\r\nconst TableToExcel = (function(Parser) {\r\n  let methods = {};\r\n\r\n  methods.initWorkBook = function() {\r\n    let wb = new ExcelJS.Workbook();\r\n    return wb;\r\n  };\r\n\r\n  methods.initSheet = function(wb, sheetName) {\r\n    let ws = wb.addWorksheet(sheetName);\r\n    return ws;\r\n  };\r\n\r\n  methods.save = function(wb, fileName) {\r\n    wb.xlsx.writeBuffer().then(function(buffer) {\r\n      saveAs(\r\n        new Blob([buffer], { type: \"application/octet-stream\" }),\r\n        fileName\r\n      );\r\n    });\r\n  };\r\n\r\n  methods.tableToSheet = function(wb, table, opts) {\r\n    let ws = this.initSheet(wb, opts.sheet.name);\r\n    ws = Parser.parseDomToTable(ws, table, opts);\r\n    return wb;\r\n  };\r\n\r\n  methods.tableToBook = function(table, opts) {\r\n    let wb = this.initWorkBook();\r\n    wb = this.tableToSheet(wb, table, opts);\r\n    return wb;\r\n  };\r\n\r\n  methods.convert = function(table, opts = {}) {\r\n    let defaultOpts = {\r\n      name: \"export.xlsx\",\r\n      autoStyle: false,\r\n      sheet: {\r\n        name: \"Sheet 1\"\r\n      }\r\n    };\r\n    opts = { ...defaultOpts, ...opts };\r\n    let wb = this.tableToBook(table, opts);\r\n    this.save(wb, opts.name);\r\n  };\r\n\r\n  return methods;\r\n})(Parser);\r\n\r\nexport default TableToExcel;\r\nwindow.TableToExcel = TableToExcel;\r\n"]}